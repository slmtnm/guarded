# Generated from Guarded.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\28")
        buf.write("\u015d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3\"\6\"\u0106\n\"\r\"\16\"")
        buf.write("\u0107\3\"\3\"\3#\6#\u010d\n#\r#\16#\u010e\3#\3#\7#\u0113")
        buf.write("\n#\f#\16#\u0116\13#\5#\u0118\n#\3$\3$\3$\3$\3$\3%\3%")
        buf.write("\3%\3%\3%\3%\3&\3&\7&\u0127\n&\f&\16&\u012a\13&\3\'\3")
        buf.write("\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3-\3.\3.\3.\3/")
        buf.write("\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3")
        buf.write("\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\66\3\66")
        buf.write("\3\67\3\67\7\67\u0157\n\67\f\67\16\67\u015a\13\67\3\67")
        buf.write("\3\67\2\28\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k")
        buf.write("\67m8\3\2\7\5\2\13\f\17\17\"\"\3\2\62;\5\2C\\aac|\6\2")
        buf.write("\62;C\\aac|\4\2\f\f\17\17\2\u0162\2\3\3\2\2\2\2\5\3\2")
        buf.write("\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2")
        buf.write("\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2")
        buf.write("\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37")
        buf.write("\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2")
        buf.write("\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2")
        buf.write("\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2")
        buf.write("\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2")
        buf.write("\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2")
        buf.write("\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3")
        buf.write("\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a")
        buf.write("\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2")
        buf.write("k\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5q\3\2\2\2\7s\3\2\2\2")
        buf.write("\tu\3\2\2\2\13w\3\2\2\2\ry\3\2\2\2\17~\3\2\2\2\21\u0084")
        buf.write("\3\2\2\2\23\u008a\3\2\2\2\25\u008d\3\2\2\2\27\u0090\3")
        buf.write("\2\2\2\31\u0093\3\2\2\2\33\u0096\3\2\2\2\35\u0099\3\2")
        buf.write("\2\2\37\u009c\3\2\2\2!\u009e\3\2\2\2#\u00a0\3\2\2\2%\u00a6")
        buf.write("\3\2\2\2\'\u00ab\3\2\2\2)\u00b1\3\2\2\2+\u00b8\3\2\2\2")
        buf.write("-\u00bf\3\2\2\2/\u00c6\3\2\2\2\61\u00ce\3\2\2\2\63\u00d8")
        buf.write("\3\2\2\2\65\u00df\3\2\2\2\67\u00e8\3\2\2\29\u00ef\3\2")
        buf.write("\2\2;\u00f8\3\2\2\2=\u00fe\3\2\2\2?\u0100\3\2\2\2A\u0102")
        buf.write("\3\2\2\2C\u0105\3\2\2\2E\u010c\3\2\2\2G\u0119\3\2\2\2")
        buf.write("I\u011e\3\2\2\2K\u0124\3\2\2\2M\u012b\3\2\2\2O\u012d\3")
        buf.write("\2\2\2Q\u012f\3\2\2\2S\u0131\3\2\2\2U\u0133\3\2\2\2W\u0135")
        buf.write("\3\2\2\2Y\u0137\3\2\2\2[\u013a\3\2\2\2]\u013d\3\2\2\2")
        buf.write("_\u0140\3\2\2\2a\u0143\3\2\2\2c\u0146\3\2\2\2e\u0149\3")
        buf.write("\2\2\2g\u014b\3\2\2\2i\u014e\3\2\2\2k\u0152\3\2\2\2m\u0154")
        buf.write("\3\2\2\2op\7*\2\2p\4\3\2\2\2qr\7+\2\2r\6\3\2\2\2st\7]")
        buf.write("\2\2t\b\3\2\2\2uv\7.\2\2v\n\3\2\2\2wx\7_\2\2x\f\3\2\2")
        buf.write("\2yz\7u\2\2z{\7m\2\2{|\7k\2\2|}\7r\2\2}\16\3\2\2\2~\177")
        buf.write("\7c\2\2\177\u0080\7d\2\2\u0080\u0081\7q\2\2\u0081\u0082")
        buf.write("\7t\2\2\u0082\u0083\7v\2\2\u0083\20\3\2\2\2\u0084\u0085")
        buf.write("\7r\2\2\u0085\u0086\7t\2\2\u0086\u0087\7k\2\2\u0087\u0088")
        buf.write("\7p\2\2\u0088\u0089\7v\2\2\u0089\22\3\2\2\2\u008a\u008b")
        buf.write("\7<\2\2\u008b\u008c\7?\2\2\u008c\24\3\2\2\2\u008d\u008e")
        buf.write("\7/\2\2\u008e\u008f\7@\2\2\u008f\26\3\2\2\2\u0090\u0091")
        buf.write("\7k\2\2\u0091\u0092\7h\2\2\u0092\30\3\2\2\2\u0093\u0094")
        buf.write("\7h\2\2\u0094\u0095\7k\2\2\u0095\32\3\2\2\2\u0096\u0097")
        buf.write("\7f\2\2\u0097\u0098\7q\2\2\u0098\34\3\2\2\2\u0099\u009a")
        buf.write("\7q\2\2\u009a\u009b\7f\2\2\u009b\36\3\2\2\2\u009c\u009d")
        buf.write("\7}\2\2\u009d \3\2\2\2\u009e\u009f\7\177\2\2\u009f\"\3")
        buf.write("\2\2\2\u00a0\u00a1\7\60\2\2\u00a1\u00a2\7n\2\2\u00a2\u00a3")
        buf.write("\7q\2\2\u00a3\u00a4\7y\2\2\u00a4\u00a5\7d\2\2\u00a5$\3")
        buf.write("\2\2\2\u00a6\u00a7\7\60\2\2\u00a7\u00a8\7w\2\2\u00a8\u00a9")
        buf.write("\7r\2\2\u00a9\u00aa\7d\2\2\u00aa&\3\2\2\2\u00ab\u00ac")
        buf.write("\7\60\2\2\u00ac\u00ad\7u\2\2\u00ad\u00ae\7k\2\2\u00ae")
        buf.write("\u00af\7|\2\2\u00af\u00b0\7g\2\2\u00b0(\3\2\2\2\u00b1")
        buf.write("\u00b2\7\60\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7q\2\2")
        buf.write("\u00b4\u00b5\7y\2\2\u00b5\u00b6\7g\2\2\u00b6\u00b7\7t")
        buf.write("\2\2\u00b7*\3\2\2\2\u00b8\u00b9\7\60\2\2\u00b9\u00ba\7")
        buf.write("w\2\2\u00ba\u00bb\7r\2\2\u00bb\u00bc\7r\2\2\u00bc\u00bd")
        buf.write("\7g\2\2\u00bd\u00be\7t\2\2\u00be,\3\2\2\2\u00bf\u00c0")
        buf.write("\7<\2\2\u00c0\u00c1\7u\2\2\u00c1\u00c2\7j\2\2\u00c2\u00c3")
        buf.write("\7k\2\2\u00c3\u00c4\7h\2\2\u00c4\u00c5\7v\2\2\u00c5.\3")
        buf.write("\2\2\2\u00c6\u00c7\7<\2\2\u00c7\u00c8\7r\2\2\u00c8\u00c9")
        buf.write("\7w\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cb\7j\2\2\u00cb\u00cc")
        buf.write("\7w\2\2\u00cc\u00cd\7r\2\2\u00cd\60\3\2\2\2\u00ce\u00cf")
        buf.write("\7<\2\2\u00cf\u00d0\7r\2\2\u00d0\u00d1\7w\2\2\u00d1\u00d2")
        buf.write("\7u\2\2\u00d2\u00d3\7j\2\2\u00d3\u00d4\7f\2\2\u00d4\u00d5")
        buf.write("\7q\2\2\u00d5\u00d6\7y\2\2\u00d6\u00d7\7p\2\2\u00d7\62")
        buf.write("\3\2\2\2\u00d8\u00d9\7<\2\2\u00d9\u00da\7f\2\2\u00da\u00db")
        buf.write("\7g\2\2\u00db\u00dc\7n\2\2\u00dc\u00dd\7w\2\2\u00dd\u00de")
        buf.write("\7r\2\2\u00de\64\3\2\2\2\u00df\u00e0\7<\2\2\u00e0\u00e1")
        buf.write("\7f\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3\7n\2\2\u00e3\u00e4")
        buf.write("\7f\2\2\u00e4\u00e5\7q\2\2\u00e5\u00e6\7y\2\2\u00e6\u00e7")
        buf.write("\7p\2\2\u00e7\66\3\2\2\2\u00e8\u00e9\7<\2\2\u00e9\u00ea")
        buf.write("\7r\2\2\u00ea\u00eb\7q\2\2\u00eb\u00ec\7r\2\2\u00ec\u00ed")
        buf.write("\7w\2\2\u00ed\u00ee\7r\2\2\u00ee8\3\2\2\2\u00ef\u00f0")
        buf.write("\7<\2\2\u00f0\u00f1\7r\2\2\u00f1\u00f2\7q\2\2\u00f2\u00f3")
        buf.write("\7r\2\2\u00f3\u00f4\7f\2\2\u00f4\u00f5\7q\2\2\u00f5\u00f6")
        buf.write("\7y\2\2\u00f6\u00f7\7p\2\2\u00f7:\3\2\2\2\u00f8\u00f9")
        buf.write("\7<\2\2\u00f9\u00fa\7u\2\2\u00fa\u00fb\7y\2\2\u00fb\u00fc")
        buf.write("\7c\2\2\u00fc\u00fd\7r\2\2\u00fd<\3\2\2\2\u00fe\u00ff")
        buf.write("\7<\2\2\u00ff>\3\2\2\2\u0100\u0101\7?\2\2\u0101@\3\2\2")
        buf.write("\2\u0102\u0103\7=\2\2\u0103B\3\2\2\2\u0104\u0106\t\2\2")
        buf.write("\2\u0105\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0105")
        buf.write("\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u010a\b\"\2\2\u010aD\3\2\2\2\u010b\u010d\t\3\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0117\3\2\2\2\u0110\u0114\7")
        buf.write("\60\2\2\u0111\u0113\t\3\2\2\u0112\u0111\3\2\2\2\u0113")
        buf.write("\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0110\3")
        buf.write("\2\2\2\u0117\u0118\3\2\2\2\u0118F\3\2\2\2\u0119\u011a")
        buf.write("\7V\2\2\u011a\u011b\7t\2\2\u011b\u011c\7w\2\2\u011c\u011d")
        buf.write("\7g\2\2\u011dH\3\2\2\2\u011e\u011f\7H\2\2\u011f\u0120")
        buf.write("\7c\2\2\u0120\u0121\7n\2\2\u0121\u0122\7u\2\2\u0122\u0123")
        buf.write("\7g\2\2\u0123J\3\2\2\2\u0124\u0128\t\4\2\2\u0125\u0127")
        buf.write("\t\5\2\2\u0126\u0125\3\2\2\2\u0127\u012a\3\2\2\2\u0128")
        buf.write("\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129L\3\2\2\2\u012a")
        buf.write("\u0128\3\2\2\2\u012b\u012c\7,\2\2\u012cN\3\2\2\2\u012d")
        buf.write("\u012e\7\61\2\2\u012eP\3\2\2\2\u012f\u0130\7-\2\2\u0130")
        buf.write("R\3\2\2\2\u0131\u0132\7/\2\2\u0132T\3\2\2\2\u0133\u0134")
        buf.write("\7@\2\2\u0134V\3\2\2\2\u0135\u0136\7>\2\2\u0136X\3\2\2")
        buf.write("\2\u0137\u0138\7@\2\2\u0138\u0139\7?\2\2\u0139Z\3\2\2")
        buf.write("\2\u013a\u013b\7>\2\2\u013b\u013c\7?\2\2\u013c\\\3\2\2")
        buf.write("\2\u013d\u013e\7?\2\2\u013e\u013f\7?\2\2\u013f^\3\2\2")
        buf.write("\2\u0140\u0141\7#\2\2\u0141\u0142\7?\2\2\u0142`\3\2\2")
        buf.write("\2\u0143\u0144\7(\2\2\u0144\u0145\7(\2\2\u0145b\3\2\2")
        buf.write("\2\u0146\u0147\7~\2\2\u0147\u0148\7~\2\2\u0148d\3\2\2")
        buf.write("\2\u0149\u014a\7\u0080\2\2\u014af\3\2\2\2\u014b\u014c")
        buf.write("\7@\2\2\u014c\u014d\7@\2\2\u014dh\3\2\2\2\u014e\u014f")
        buf.write("\7>\2\2\u014f\u0150\7?\2\2\u0150\u0151\7@\2\2\u0151j\3")
        buf.write("\2\2\2\u0152\u0153\7~\2\2\u0153l\3\2\2\2\u0154\u0158\7")
        buf.write("%\2\2\u0155\u0157\n\6\2\2\u0156\u0155\3\2\2\2\u0157\u015a")
        buf.write("\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159")
        buf.write("\u015b\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u015c\b\67\2")
        buf.write("\2\u015cn\3\2\2\2\t\2\u0107\u010e\u0114\u0117\u0128\u0158")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class GuardedLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    SEP = 32
    WHITESPACE = 33
    NUMBER = 34
    TRUE = 35
    FALSE = 36
    ID = 37
    MUL = 38
    DIV = 39
    ADD = 40
    SUB = 41
    GT = 42
    LT = 43
    GE = 44
    LE = 45
    EQ = 46
    NEQ = 47
    AND = 48
    OR = 49
    NEG = 50
    IMPL = 51
    EQUIV = 52
    LOWER_BOUND_DELIMITER = 53
    LINE_COMMENT = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "','", "']'", "'skip'", "'abort'", "'print'", 
            "':='", "'->'", "'if'", "'fi'", "'do'", "'od'", "'{'", "'}'", 
            "'.lowb'", "'.upb'", "'.size'", "'.lower'", "'.upper'", "':shift'", 
            "':pushup'", "':pushdown'", "':delup'", "':deldown'", "':popup'", 
            "':popdown'", "':swap'", "':'", "'='", "';'", "'True'", "'False'", 
            "'*'", "'/'", "'+'", "'-'", "'>'", "'<'", "'>='", "'<='", "'=='", 
            "'!='", "'&&'", "'||'", "'~'", "'>>'", "'<=>'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "SEP", "WHITESPACE", "NUMBER", "TRUE", "FALSE", "ID", "MUL", 
            "DIV", "ADD", "SUB", "GT", "LT", "GE", "LE", "EQ", "NEQ", "AND", 
            "OR", "NEG", "IMPL", "EQUIV", "LOWER_BOUND_DELIMITER", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "SEP", "WHITESPACE", 
                  "NUMBER", "TRUE", "FALSE", "ID", "MUL", "DIV", "ADD", 
                  "SUB", "GT", "LT", "GE", "LE", "EQ", "NEQ", "AND", "OR", 
                  "NEG", "IMPL", "EQUIV", "LOWER_BOUND_DELIMITER", "LINE_COMMENT" ]

    grammarFileName = "Guarded.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


