# Generated from Guarded.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65")
        buf.write("\u0146\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\6\37\u00ef\n")
        buf.write("\37\r\37\16\37\u00f0\3\37\3\37\3 \6 \u00f6\n \r \16 \u00f7")
        buf.write("\3 \3 \7 \u00fc\n \f \16 \u00ff\13 \5 \u0101\n \3!\3!")
        buf.write("\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\7#\u0110\n#\f")
        buf.write("#\16#\u0113\13#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)")
        buf.write("\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3/\3/\3")
        buf.write("/\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3")
        buf.write("\63\3\64\3\64\7\64\u0140\n\64\f\64\16\64\u0143\13\64\3")
        buf.write("\64\3\64\2\2\65\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65")
        buf.write("\3\2\7\5\2\13\f\17\17\"\"\3\2\62;\5\2C\\aac|\6\2\62;C")
        buf.write("\\aac|\4\2\f\f\17\17\2\u014b\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5k\3\2\2\2")
        buf.write("\7m\3\2\2\2\to\3\2\2\2\13q\3\2\2\2\rs\3\2\2\2\17v\3\2")
        buf.write("\2\2\21y\3\2\2\2\23|\3\2\2\2\25\177\3\2\2\2\27\u0082\3")
        buf.write("\2\2\2\31\u0085\3\2\2\2\33\u0087\3\2\2\2\35\u0089\3\2")
        buf.write("\2\2\37\u008f\3\2\2\2!\u0094\3\2\2\2#\u009a\3\2\2\2%\u00a1")
        buf.write("\3\2\2\2\'\u00a8\3\2\2\2)\u00af\3\2\2\2+\u00b7\3\2\2\2")
        buf.write("-\u00c1\3\2\2\2/\u00c8\3\2\2\2\61\u00d1\3\2\2\2\63\u00d8")
        buf.write("\3\2\2\2\65\u00e1\3\2\2\2\67\u00e7\3\2\2\29\u00e9\3\2")
        buf.write("\2\2;\u00eb\3\2\2\2=\u00ee\3\2\2\2?\u00f5\3\2\2\2A\u0102")
        buf.write("\3\2\2\2C\u0107\3\2\2\2E\u010d\3\2\2\2G\u0114\3\2\2\2")
        buf.write("I\u0116\3\2\2\2K\u0118\3\2\2\2M\u011a\3\2\2\2O\u011c\3")
        buf.write("\2\2\2Q\u011e\3\2\2\2S\u0120\3\2\2\2U\u0123\3\2\2\2W\u0126")
        buf.write("\3\2\2\2Y\u0129\3\2\2\2[\u012c\3\2\2\2]\u012f\3\2\2\2")
        buf.write("_\u0132\3\2\2\2a\u0134\3\2\2\2c\u0137\3\2\2\2e\u013b\3")
        buf.write("\2\2\2g\u013d\3\2\2\2ij\7*\2\2j\4\3\2\2\2kl\7+\2\2l\6")
        buf.write("\3\2\2\2mn\7]\2\2n\b\3\2\2\2op\7.\2\2p\n\3\2\2\2qr\7_")
        buf.write("\2\2r\f\3\2\2\2st\7<\2\2tu\7?\2\2u\16\3\2\2\2vw\7/\2\2")
        buf.write("wx\7@\2\2x\20\3\2\2\2yz\7k\2\2z{\7h\2\2{\22\3\2\2\2|}")
        buf.write("\7h\2\2}~\7k\2\2~\24\3\2\2\2\177\u0080\7f\2\2\u0080\u0081")
        buf.write("\7q\2\2\u0081\26\3\2\2\2\u0082\u0083\7q\2\2\u0083\u0084")
        buf.write("\7f\2\2\u0084\30\3\2\2\2\u0085\u0086\7}\2\2\u0086\32\3")
        buf.write("\2\2\2\u0087\u0088\7\177\2\2\u0088\34\3\2\2\2\u0089\u008a")
        buf.write("\7\60\2\2\u008a\u008b\7n\2\2\u008b\u008c\7q\2\2\u008c")
        buf.write("\u008d\7y\2\2\u008d\u008e\7d\2\2\u008e\36\3\2\2\2\u008f")
        buf.write("\u0090\7\60\2\2\u0090\u0091\7w\2\2\u0091\u0092\7r\2\2")
        buf.write("\u0092\u0093\7d\2\2\u0093 \3\2\2\2\u0094\u0095\7\60\2")
        buf.write("\2\u0095\u0096\7u\2\2\u0096\u0097\7k\2\2\u0097\u0098\7")
        buf.write("|\2\2\u0098\u0099\7g\2\2\u0099\"\3\2\2\2\u009a\u009b\7")
        buf.write("\60\2\2\u009b\u009c\7n\2\2\u009c\u009d\7q\2\2\u009d\u009e")
        buf.write("\7y\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7t\2\2\u00a0$\3")
        buf.write("\2\2\2\u00a1\u00a2\7\60\2\2\u00a2\u00a3\7w\2\2\u00a3\u00a4")
        buf.write("\7r\2\2\u00a4\u00a5\7r\2\2\u00a5\u00a6\7g\2\2\u00a6\u00a7")
        buf.write("\7t\2\2\u00a7&\3\2\2\2\u00a8\u00a9\7<\2\2\u00a9\u00aa")
        buf.write("\7u\2\2\u00aa\u00ab\7j\2\2\u00ab\u00ac\7k\2\2\u00ac\u00ad")
        buf.write("\7h\2\2\u00ad\u00ae\7v\2\2\u00ae(\3\2\2\2\u00af\u00b0")
        buf.write("\7<\2\2\u00b0\u00b1\7r\2\2\u00b1\u00b2\7w\2\2\u00b2\u00b3")
        buf.write("\7u\2\2\u00b3\u00b4\7j\2\2\u00b4\u00b5\7w\2\2\u00b5\u00b6")
        buf.write("\7r\2\2\u00b6*\3\2\2\2\u00b7\u00b8\7<\2\2\u00b8\u00b9")
        buf.write("\7r\2\2\u00b9\u00ba\7w\2\2\u00ba\u00bb\7u\2\2\u00bb\u00bc")
        buf.write("\7j\2\2\u00bc\u00bd\7f\2\2\u00bd\u00be\7q\2\2\u00be\u00bf")
        buf.write("\7y\2\2\u00bf\u00c0\7p\2\2\u00c0,\3\2\2\2\u00c1\u00c2")
        buf.write("\7<\2\2\u00c2\u00c3\7f\2\2\u00c3\u00c4\7g\2\2\u00c4\u00c5")
        buf.write("\7n\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7r\2\2\u00c7.\3")
        buf.write("\2\2\2\u00c8\u00c9\7<\2\2\u00c9\u00ca\7f\2\2\u00ca\u00cb")
        buf.write("\7g\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd\7f\2\2\u00cd\u00ce")
        buf.write("\7q\2\2\u00ce\u00cf\7y\2\2\u00cf\u00d0\7p\2\2\u00d0\60")
        buf.write("\3\2\2\2\u00d1\u00d2\7<\2\2\u00d2\u00d3\7r\2\2\u00d3\u00d4")
        buf.write("\7q\2\2\u00d4\u00d5\7r\2\2\u00d5\u00d6\7w\2\2\u00d6\u00d7")
        buf.write("\7r\2\2\u00d7\62\3\2\2\2\u00d8\u00d9\7<\2\2\u00d9\u00da")
        buf.write("\7r\2\2\u00da\u00db\7q\2\2\u00db\u00dc\7r\2\2\u00dc\u00dd")
        buf.write("\7f\2\2\u00dd\u00de\7q\2\2\u00de\u00df\7y\2\2\u00df\u00e0")
        buf.write("\7p\2\2\u00e0\64\3\2\2\2\u00e1\u00e2\7<\2\2\u00e2\u00e3")
        buf.write("\7u\2\2\u00e3\u00e4\7y\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6")
        buf.write("\7r\2\2\u00e6\66\3\2\2\2\u00e7\u00e8\7<\2\2\u00e88\3\2")
        buf.write("\2\2\u00e9\u00ea\7?\2\2\u00ea:\3\2\2\2\u00eb\u00ec\7=")
        buf.write("\2\2\u00ec<\3\2\2\2\u00ed\u00ef\t\2\2\2\u00ee\u00ed\3")
        buf.write("\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f3\b\37\2\2\u00f3")
        buf.write(">\3\2\2\2\u00f4\u00f6\t\3\2\2\u00f5\u00f4\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8\u0100\3\2\2\2\u00f9\u00fd\7\60\2\2\u00fa\u00fc")
        buf.write("\t\3\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd")
        buf.write("\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0101\3\2\2\2")
        buf.write("\u00ff\u00fd\3\2\2\2\u0100\u00f9\3\2\2\2\u0100\u0101\3")
        buf.write("\2\2\2\u0101@\3\2\2\2\u0102\u0103\7V\2\2\u0103\u0104\7")
        buf.write("t\2\2\u0104\u0105\7w\2\2\u0105\u0106\7g\2\2\u0106B\3\2")
        buf.write("\2\2\u0107\u0108\7H\2\2\u0108\u0109\7c\2\2\u0109\u010a")
        buf.write("\7n\2\2\u010a\u010b\7u\2\2\u010b\u010c\7g\2\2\u010cD\3")
        buf.write("\2\2\2\u010d\u0111\t\4\2\2\u010e\u0110\t\5\2\2\u010f\u010e")
        buf.write("\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111")
        buf.write("\u0112\3\2\2\2\u0112F\3\2\2\2\u0113\u0111\3\2\2\2\u0114")
        buf.write("\u0115\7,\2\2\u0115H\3\2\2\2\u0116\u0117\7\61\2\2\u0117")
        buf.write("J\3\2\2\2\u0118\u0119\7-\2\2\u0119L\3\2\2\2\u011a\u011b")
        buf.write("\7/\2\2\u011bN\3\2\2\2\u011c\u011d\7@\2\2\u011dP\3\2\2")
        buf.write("\2\u011e\u011f\7>\2\2\u011fR\3\2\2\2\u0120\u0121\7@\2")
        buf.write("\2\u0121\u0122\7?\2\2\u0122T\3\2\2\2\u0123\u0124\7>\2")
        buf.write("\2\u0124\u0125\7?\2\2\u0125V\3\2\2\2\u0126\u0127\7?\2")
        buf.write("\2\u0127\u0128\7?\2\2\u0128X\3\2\2\2\u0129\u012a\7#\2")
        buf.write("\2\u012a\u012b\7?\2\2\u012bZ\3\2\2\2\u012c\u012d\7(\2")
        buf.write("\2\u012d\u012e\7(\2\2\u012e\\\3\2\2\2\u012f\u0130\7~\2")
        buf.write("\2\u0130\u0131\7~\2\2\u0131^\3\2\2\2\u0132\u0133\7\u0080")
        buf.write("\2\2\u0133`\3\2\2\2\u0134\u0135\7@\2\2\u0135\u0136\7@")
        buf.write("\2\2\u0136b\3\2\2\2\u0137\u0138\7>\2\2\u0138\u0139\7?")
        buf.write("\2\2\u0139\u013a\7@\2\2\u013ad\3\2\2\2\u013b\u013c\7~")
        buf.write("\2\2\u013cf\3\2\2\2\u013d\u0141\7%\2\2\u013e\u0140\n\6")
        buf.write("\2\2\u013f\u013e\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f")
        buf.write("\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0144\3\2\2\2\u0143")
        buf.write("\u0141\3\2\2\2\u0144\u0145\b\64\2\2\u0145h\3\2\2\2\t\2")
        buf.write("\u00f0\u00f7\u00fd\u0100\u0111\u0141\3\b\2\2")
        return buf.getvalue()


class GuardedLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    SEP = 29
    WHITESPACE = 30
    NUMBER = 31
    TRUE = 32
    FALSE = 33
    ID = 34
    MUL = 35
    DIV = 36
    ADD = 37
    SUB = 38
    GT = 39
    LT = 40
    GE = 41
    LE = 42
    EQ = 43
    NEQ = 44
    AND = 45
    OR = 46
    NEG = 47
    IMPL = 48
    EQUIV = 49
    LOWER_BOUND_DELIMITER = 50
    LINE_COMMENT = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "','", "']'", "':='", "'->'", "'if'", "'fi'", 
            "'do'", "'od'", "'{'", "'}'", "'.lowb'", "'.upb'", "'.size'", 
            "'.lower'", "'.upper'", "':shift'", "':pushup'", "':pushdown'", 
            "':delup'", "':deldown'", "':popup'", "':popdown'", "':swap'", 
            "':'", "'='", "';'", "'True'", "'False'", "'*'", "'/'", "'+'", 
            "'-'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", 
            "'||'", "'~'", "'>>'", "'<=>'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "SEP", "WHITESPACE", "NUMBER", "TRUE", "FALSE", "ID", "MUL", 
            "DIV", "ADD", "SUB", "GT", "LT", "GE", "LE", "EQ", "NEQ", "AND", 
            "OR", "NEG", "IMPL", "EQUIV", "LOWER_BOUND_DELIMITER", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "SEP", "WHITESPACE", "NUMBER", "TRUE", 
                  "FALSE", "ID", "MUL", "DIV", "ADD", "SUB", "GT", "LT", 
                  "GE", "LE", "EQ", "NEQ", "AND", "OR", "NEG", "IMPL", "EQUIV", 
                  "LOWER_BOUND_DELIMITER", "LINE_COMMENT" ]

    grammarFileName = "Guarded.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


